// Code generated by protoc-gen-go.
// source: proto/api.proto
// DO NOT EDIT!

/*
Package imagescaler is a generated protocol buffer package.

It is generated from these files:
	proto/api.proto

It has these top-level messages:
	ScaleImageRequest
	ScaleImageReply
	Image
	ImageSource
*/
package imagescaler

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type ScaleImageRequest struct {
	// The image
	Image *Image `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	// If the image should be rescaled
	Rescale bool `protobuf:"varint,2,opt,name=rescale" json:"rescale,omitempty"`
	// If the image should be grey-scaled
	Greyscaling bool `protobuf:"varint,3,opt,name=greyscaling" json:"greyscaling,omitempty"`
}

func (m *ScaleImageRequest) Reset()         { *m = ScaleImageRequest{} }
func (m *ScaleImageRequest) String() string { return proto.CompactTextString(m) }
func (*ScaleImageRequest) ProtoMessage()    {}

func (m *ScaleImageRequest) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type ScaleImageReply struct {
	// Image content
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *ScaleImageReply) Reset()         { *m = ScaleImageReply{} }
func (m *ScaleImageReply) String() string { return proto.CompactTextString(m) }
func (*ScaleImageReply) ProtoMessage()    {}

type Image struct {
	// Image content, represented as a stream of bytes.
	// Note: As with all `bytes` fields, protobuffers use a pure binary
	// representation, whereas JSON representations use base64.
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// If both content and source is present use content.
	Source *ImageSource `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}

func (m *Image) GetSource() *ImageSource {
	if m != nil {
		return m.Source
	}
	return nil
}

type ImageSource struct {
	// The URI of the source document. Can be either:
	//
	// 1. A publicly-accessible image HTTP/HTTPS URL. When fetching images from
	HttpUri string `protobuf:"bytes,1,opt,name=http_uri" json:"http_uri,omitempty"`
}

func (m *ImageSource) Reset()         { *m = ImageSource{} }
func (m *ImageSource) String() string { return proto.CompactTextString(m) }
func (*ImageSource) ProtoMessage()    {}

func init() {
}

// Client API for ImageScaler service

type ImageScalerClient interface {
	// Obtain re-scaled and possibly grey scaled images
	ScaleImage(ctx context.Context, in *ScaleImageRequest, opts ...grpc.CallOption) (*ScaleImageReply, error)
	// Obtain re-scaled and possible grey scaled images
	// as a stream
	ScaleImageStream(ctx context.Context, opts ...grpc.CallOption) (ImageScaler_ScaleImageStreamClient, error)
}

type imageScalerClient struct {
	cc *grpc.ClientConn
}

func NewImageScalerClient(cc *grpc.ClientConn) ImageScalerClient {
	return &imageScalerClient{cc}
}

func (c *imageScalerClient) ScaleImage(ctx context.Context, in *ScaleImageRequest, opts ...grpc.CallOption) (*ScaleImageReply, error) {
	out := new(ScaleImageReply)
	err := grpc.Invoke(ctx, "/imagescaler.ImageScaler/ScaleImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageScalerClient) ScaleImageStream(ctx context.Context, opts ...grpc.CallOption) (ImageScaler_ScaleImageStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ImageScaler_serviceDesc.Streams[0], c.cc, "/imagescaler.ImageScaler/ScaleImageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageScalerScaleImageStreamClient{stream}
	return x, nil
}

type ImageScaler_ScaleImageStreamClient interface {
	Send(*ScaleImageRequest) error
	Recv() (*ScaleImageReply, error)
	grpc.ClientStream
}

type imageScalerScaleImageStreamClient struct {
	grpc.ClientStream
}

func (x *imageScalerScaleImageStreamClient) Send(m *ScaleImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageScalerScaleImageStreamClient) Recv() (*ScaleImageReply, error) {
	m := new(ScaleImageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ImageScaler service

type ImageScalerServer interface {
	// Obtain re-scaled and possibly grey scaled images
	ScaleImage(context.Context, *ScaleImageRequest) (*ScaleImageReply, error)
	// Obtain re-scaled and possible grey scaled images
	// as a stream
	ScaleImageStream(ImageScaler_ScaleImageStreamServer) error
}

func RegisterImageScalerServer(s *grpc.Server, srv ImageScalerServer) {
	s.RegisterService(&_ImageScaler_serviceDesc, srv)
}

func _ImageScaler_ScaleImage_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ScaleImageRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ImageScalerServer).ScaleImage(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ImageScaler_ScaleImageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageScalerServer).ScaleImageStream(&imageScalerScaleImageStreamServer{stream})
}

type ImageScaler_ScaleImageStreamServer interface {
	Send(*ScaleImageReply) error
	Recv() (*ScaleImageRequest, error)
	grpc.ServerStream
}

type imageScalerScaleImageStreamServer struct {
	grpc.ServerStream
}

func (x *imageScalerScaleImageStreamServer) Send(m *ScaleImageReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageScalerScaleImageStreamServer) Recv() (*ScaleImageRequest, error) {
	m := new(ScaleImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ImageScaler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imagescaler.ImageScaler",
	HandlerType: (*ImageScalerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScaleImage",
			Handler:    _ImageScaler_ScaleImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ScaleImageStream",
			Handler:       _ImageScaler_ScaleImageStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
